swagger: '2.0'
info:
  description: |
    Custom use cases test
  version: "1.0.0"
  title: Custom use cases test
schemes:
 - https
paths:
  /items:
    get:
      summary: Get items list
      operationId: getItems
      parameters:
      - name: pageSize
        in: query
        required: true
        type: integer
        format: int32
      - name: page
        in: query
        description: page number
        required: true
        type: integer
        format: int32
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ItemList'
  /itemModels:
    get:
      summary: Get item models list
      operationId: getItemModels
      parameters:
      - name: pageSize
        in: query
        required: true
        type: integer
        format: int32
      - name: page
        in: query
        description: page number
        required: true
        type: integer
        format: int32
      produces:
      - application/json
      - application/xml
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              total:
                type: integer
              list:
                type: array
                items:
                  $ref: '#/definitions/ItemModelList'
  /pets/{id}:
    parameters:
    -
      in: path
      name: id
      type: string
      required: true
    get:
      responses:
        200:
          description: OK
          schema:
            type: array
            $ref: "#/definitions/Pet"
    delete:
      responses:
        200:
          description: OK
    patch:
#      requestBody:
#        content:
#          application/json:
#            schema:
#              oneOf:
#                - $ref: '#/definitions/Cat'
#                - $ref: '#/definitions/Dog'
#              discriminator:
#                propertyName: pet_type
      responses:
        '200':
          description: Updated
  /customers:
    get:
      responses:
        200:
          description: OK
          schema:
            type: array
            x-nullable: true
            items:
              $ref: "#/definitions/customer"
definitions:
  ItemList:
    description: List of items,
    required:
      - data
    type: object
    properties:
      data:
        description: List of controllers in the system (this can be empty)
        type: array
        items:
          $ref: "#/definitions/Data"
  ItemModelList:
    description: List of Item models
    required:
      - data
    type: object
    properties:
      data:
        description: The list of available ItemModels and their configurations
        type: array
        items:
          $ref: "#/definitions/DataModel"
  myInterface:
    type: object
    properties:
      myName:
        type: string
      myId:
        type: string
      myMap:
        type: object
        additionalProperties:
          $ref: "#/definitions/Data"
  Data:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
        format: email
      phone:
        type: string
        format: phone
      title:
        type: string
        format: phone
  DataModel:
    type: object
    properties:
      id:
        type: integer
        format: int64
      entities:
        type: array
        items:
          type: number
          format: int64
      roleId:
        type: number
        format: int64
      imageData:
        type: string
        description: base64 user uploaded image string
      imageUrl:
        type: string
        description: url to user avatar image
  TestModel:
      type: object
      properties:
        count:
          type: integer
          description: sum of everything there is converted to bananas
        42test:
          type: string
        some-key:
          type: string
        anotherKey@:
          type: string
        yet@notherKey:
          type: string
  Pet:
    type: object
    required:
      - pet_type
    properties:
      pet_type:
        type: string
    discriminator: pet_type
  Dog:
    allOf: # Combines the main `Pet` schema with `Dog`-specific properties
      - $ref: '#/definitions/Pet'
      - type: object
        # all other properties specific to a `Dog`
        properties:
          bark:
            type: boolean
          breed:
            type: string
            enum: [Dingo, Husky, Retriever, Shepherd]
  Cat:
    allOf: # Combines the main `Pet` schema with `Cat`-specific properties
      - $ref: '#/definitions/Pet'
      - type: object
        # all other properties specific to a `Cat`
        properties:
          hunts:
            type: boolean
          age:
            type: integer
          eaten:
            type: array
            items:
              type: object
              $ref: '#/definitions/Mouse'
  Mouse:
    properties:
      color:
        type: string
    allOf:
      - $ref: '#/definitions/Pet'
      - type: object
  model:
    type: "object"
    properties:
      id:
        type: "string"
      created:
        type: "integer"
      updated:
        type: "integer"
      deleted:
        type: "integer"
  customer:
    type: "object"
    allOf:
    - $ref: "#/definitions/model"
    properties:
      name:
        type: "string"
      address:
        type: "string"
      right:
        $ref: "#/definitions/right"
  right:
    type: string
    enum:
      - MEMBER
      - ADMIN
      - "VIEW_ALL"
      - "VIEW_MY"
      - "VIEW_EDIT"
      - "CONTROL"
  possition:
    type: integer
    enum:
      - 1
      - 2
      - 3
    description: |
      - 1 First
      - 2 Second
      - 3 Third
