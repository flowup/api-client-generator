swagger: '2.0'
info:
  description: |
    Angular integration test
  version: '1.0.0'
  title: Angular integration test
schemes:
  - https
  - http
paths:
  /pet:
    post:
      tags:
        - 'pet'
      summary: 'Add a new pet to the store'
      operationId: 'addPet'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Pet object that needs to be added to the store'
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        405:
          description: 'Invalid input'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
    put:
      tags:
        - 'pet'
      summary: 'Update an existing pet'
      operationId: 'updatePet'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Pet object that needs to be added to the store'
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        400:
          description: 'Invalid ID supplied'
        404:
          description: 'Pet not found'
        405:
          description: 'Validation exception'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/findByStatus:
    get:
      tags:
        - 'pet'
      summary: 'Finds Pets by status'
      description: 'Multiple status values can be provided with comma separated strings'
      operationId: 'findPetsByStatus'
      produces:
        - 'application/json'
      parameters:
        - name: 'status'
          in: 'query'
          description: 'Status values that need to be considered for filter'
          required: true
          type: 'array'
          items:
            type: 'string'
            enum:
              - 'available'
              - 'pending'
              - 'sold'
            default: 'available'
          collectionFormat: 'multi'
      responses:
        200:
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Pet'
        400:
          description: 'Invalid status value'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/findByTags:
    get:
      tags:
        - 'pet'
      summary: 'Finds Pets by tags'
      description:
        "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: 'findPetsByTags'
      produces:
        - 'application/json'
      parameters:
        - name: 'tags'
          in: 'query'
          description: 'Tags to filter by'
          required: true
          type: 'array'
          items:
            type: 'string'
          collectionFormat: 'multi'
      responses:
        200:
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Pet'
        400:
          description: 'Invalid tag value'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      deprecated: true
  /pet/{petId}:
    get:
      tags:
        - 'pet'
      summary: 'Find pet by ID'
      description: 'Returns a single pet'
      operationId: 'getPetById'
      produces:
        - 'application/json'
      parameters:
        - name: 'petId'
          in: 'path'
          description: 'ID of pet to return'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Pet'
        400:
          description: 'Invalid ID supplied'
        404:
          description: 'Pet not found'
      security:
        - api_key: []
    patch:
      tags:
        - 'pet'
      summary: 'Updates a pet in the store with query parameters'
      operationId: 'updatePetWithQuery'
      produces:
        - 'application/json'
      parameters:
        - name: 'petId'
          in: 'path'
          description: 'ID of pet that needs to be updated'
          required: true
          type: 'integer'
          format: 'int64'
        - name: 'name'
          in: 'query'
          description: 'Updated name of the pet'
          required: false
          type: 'string'
        - name: 'status'
          in: 'query'
          description: 'Updated status of the pet'
          required: false
          type: 'string'
          enum:
            - 'available'
            - 'pending'
            - 'sold'
      responses:
        405:
          description: 'Invalid input'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
    post:
      tags:
        - 'pet'
      summary: 'Updates a pet in the store with form data'
      description: ''
      operationId: 'updatePetWithForm'
      consumes:
        - 'application/x-www-form-urlencoded'
      produces:
        - 'application/json'
        - 'application/xml'
      parameters:
        - name: 'petId'
          in: 'path'
          description: 'ID of pet that needs to be updated'
          required: true
          type: 'integer'
          format: 'int64'
        - name: 'name'
          in: 'formData'
          description: 'Updated name of the pet'
          required: false
          type: 'string'
        - name: 'status'
          in: 'formData'
          description: 'Updated status of the pet'
          required: false
          type: 'string'
          enum:
            - 'available'
            - 'pending'
            - 'sold'
      responses:
        405:
          description: 'Invalid input'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'

    delete:
      tags:
        - 'pet'
      summary: 'Deletes a pet'
      operationId: 'deletePet'
      produces:
        - 'application/json'
      parameters:
        - name: 'api_key'
          in: 'header'
          required: false
          type: 'string'
        - name: 'petId'
          in: 'path'
          description: 'Pet id to delete'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        400:
          description: 'Invalid ID supplied'
        404:
          description: 'Pet not found'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/{petId}/uploadImage:
    post:
      tags:
        - 'pet'
      summary: 'uploads an image'
      description: ''
      operationId: 'uploadPetImageFile'
      consumes:
        - 'multipart/form-data'
      produces:
        - 'application/json'
      parameters:
        - name: 'petId'
          in: 'path'
          description: 'ID of pet to update'
          required: true
          type: 'integer'
          format: 'int64'
        - name: 'additionalMetadata'
          in: 'formData'
          description: 'Additional data to pass to server'
          required: false
          type: 'string'
        - name: 'file'
          in: 'formData'
          description: 'file to upload'
          required: false
          type: 'file'
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/{petId}/downloadImage:
    get:
      tags:
        - pet
      operationId: download pet image
      summary: Download image of a certain pet
      description: A PNG file should be returned
      parameters:
        - name: petId
          in: path
          description: Id of pet
          required: true
          type: integer
          format: int64
        - name: all
          in: query
          description: Indicator of downloading data(all or errors only)
          required: false
          type: boolean
      produces:
        - application/vnd.ms-excel
      security:
        - JWT: []
      responses:
        200:
          description: Exported file.
          schema:
            type: file
        401:
          description: Unauthorized access
        404:
          description: Import not found
        405:
          description: Invalid input
  /pets:
    get:
      tags:
        - 'pet'
      summary: 'Get pets from the store'
      operationId: 'getPets'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'query'
          name: 'status'
          type: 'string'
          description: 'pet status in the store'
          enum:
            - 'available'
            - 'pending'
            - 'sold'
      responses:
        200:
          description: 'Pets that fulfill the filter'
      security:
        - petstore_auth:
            - 'read:pets'

  /user:
    post:
      tags:
        - 'user'
      summary: 'Create user'
      description: 'This can only be done by the logged in user.'
      operationId: 'createUser'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Created user object'
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: 'successful operation'
  /user/createWithList:
    post:
      tags:
        - 'user'
      summary: 'Creates list of users with given input array'
      operationId: 'createUsersWithListInput'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'List of user object'
          required: true
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: 'successful operation'
  /user/login:
    get:
      tags:
        - 'user'
      summary: 'Logs user into the system'
      operationId: 'loginUser'
      produces:
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'query'
          description: 'The user name for login'
          required: true
          type: 'string'
        - name: 'password'
          in: 'query'
          description: 'The password for login in clear text'
          required: true
          type: 'string'
      responses:
        200:
          description: 'successful operation'
          schema:
            type: 'string'
          headers:
            X-Rate-Limit:
              type: 'integer'
              format: 'int32'
              description: 'calls per hour allowed by the user'
            X-Expires-After:
              type: 'string'
              format: 'date-time'
              description: 'date in UTC when token expires'
        400:
          description: 'Invalid username/password supplied'
  /user/{username}:
    get:
      tags:
        - 'user'
      summary: 'Get user by user name'
      operationId: 'getUserByName'
      produces:
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'path'
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: 'string'
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/User'
        400:
          description: 'Invalid username supplied'
        404:
          description: 'User not found'
    put:
      tags:
        - 'user'
      summary: 'Updated user'
      description: 'This can only be done by the logged in user.'
      operationId: 'updateUser'
      produces:
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'path'
          description: 'name that need to be updated'
          required: true
          type: 'string'
        - in: 'body'
          name: 'body'
          description: 'Updated user object'
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        400:
          description: 'Invalid user supplied'
        404:
          description: 'User not found'
    delete:
      tags:
        - 'user'
      summary: 'Delete user'
      description: 'This can only be done by the logged in user.'
      operationId: 'deleteUser'
      produces:
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'path'
          description: 'The name that needs to be deleted'
          required: true
          type: 'string'
      responses:
        400:
          description: 'Invalid username supplied'
        404:
          description: 'User not found'
securityDefinitions:
  petstore_auth:
    type: 'oauth2'
    authorizationUrl: 'https://petstore.swagger.io/oauth/dialog'
    flow: 'implicit'
    scopes:
      write:pets: 'modify pets in your account'
      read:pets: 'read your pets'
  api_key:
    type: 'apiKey'
    name: 'api_key'
    in: 'header'
definitions:
  User:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      username:
        type: 'string'
      firstName:
        type: 'string'
      lastName:
        type: 'string'
      email:
        type: 'string'
      password:
        type: 'string'
      phone:
        type: 'string'
      userStatus:
        type: 'integer'
        format: 'int32'
        description: 'User Status'
    xml:
      name: 'User'
  Category:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
    xml:
      name: 'Category'
  Tag:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
    xml:
      name: 'Tag'
  Pet:
    type: 'object'
    required:
      - 'name'
      - 'photoUrls'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      category:
        $ref: '#/definitions/Category'
        x-nullable: true
      name:
        type: 'string'
        example: 'doggie'
      photoUrls:
        type: 'array'
        xml:
          name: 'photoUrl'
          wrapped: true
        items:
          type: 'string'
      tags:
        type: 'array'
        xml:
          name: 'tag'
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
      status:
        type: 'string'
        description: 'pet status in the store'
        enum:
          - 'available'
          - 'pending'
          - 'sold'
    xml:
      name: 'Pet'
  Customer:
    type: 'object'
    allOf:
      - $ref: '#/definitions/User'
    properties:
      name:
        type: 'string'
        x-nullable: false
      address:
        type: 'string'
      right:
        $ref: '#/definitions/right'
      position:
        $ref: '#/definitions/position'
    required:
      - right
      - position
  right:
    type: string
    enum:
      - MEMBER
      - ADMIN
      - 'VIEW_ALL'
      - 'VIEW_MY'
      - 'VIEW_EDIT'
      - 'READ WRITE'
      - 'CONTROL'
  position:
    type: integer
    enum:
      - 1
      - 2
      - 3
    description: |
      - 1 First
      - 2 Second
      - 3 Third
  interfaceWithDictionary:
    type: object
    required:
      - id
    properties:
      id:
        type: string
      customers:
        description: '{ [key: string]: Customer }'
        type: object
        additionalProperties:
          $ref: '#/definitions/Customer'
  interfaceWithSimpleDictionary:
    type: object
    required:
      - foo
    properties:
      foo:
        description: '{ [key: string]: number }'
        type: object
        additionalProperties:
          type: number
  interfaceWithArrayOfDictionariesOfArrayOfRights:
    type: object
    properties:
      rightCollections:
        description: '{ [key: string]: Right[] }[]'
        type: array
        items:
          additionalProperties:
            type: array
            items:
              $ref: '#/definitions/right'
  ApiResponse:
    type: 'object'
    properties:
      code:
        type: 'integer'
        format: 'int32'
      type:
        type: 'string'
      message:
        type: 'string'
