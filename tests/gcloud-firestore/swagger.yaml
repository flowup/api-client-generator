swagger: '2.0'
schemes:
  - https
host: firestore.googleapis.com
basePath: /v1beta1
info:
  contact:
    name: Google
    url: 'https://google.com'
  title: Google Cloud Firestore
  version: v1beta1
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-apisguru-categories:
    - backend
  x-logo:
    url: 'https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.6.0
      format: google
      url: 'https://firestore.googleapis.com/$discovery/rest?version=v1beta1'
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: firestore
externalDocs:
  url: 'https://cloud.google.com/firestore'
securityDefinitions:
  Oauth2:
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    description: Oauth 2.0 authentication
    flow: implicit
    scopes:
      'https://www.googleapis.com/auth/cloud-platform': View and manage your data across Google Cloud Platform services
      'https://www.googleapis.com/auth/datastore': View and manage your Google Cloud Datastore data
    type: oauth2
parameters:
  $.xgafv:
    description: V1 error format.
    enum:
      - '1'
      - '2'
    in: query
    name: $.xgafv
    type: string
  access_token:
    description: OAuth access token.
    in: query
    name: access_token
    type: string
  alt:
    default: json
    description: Data format for response.
    enum:
      - json
      - media
      - proto
    in: query
    name: alt
    type: string
  bearer_token:
    description: OAuth bearer token.
    in: query
    name: bearer_token
    type: string
  callback:
    description: JSONP
    in: query
    name: callback
    type: string
  fields:
    description: Selector specifying which fields to include in a partial response.
    in: query
    name: fields
    type: string
  key:
    description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
    in: query
    name: key
    type: string
  oauth_token:
    description: OAuth 2.0 token for the current user.
    in: query
    name: oauth_token
    type: string
  pp:
    default: true
    description: Pretty-print response.
    in: query
    name: pp
    type: boolean
  prettyPrint:
    default: true
    description: Returns response with indentations and line breaks.
    in: query
    name: prettyPrint
    type: boolean
  quotaUser:
    description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
    in: query
    name: quotaUser
    type: string
  uploadType:
    description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
    in: query
    name: uploadType
    type: string
  upload_protocol:
    description: 'Upload protocol for media (e.g. "raw", "multipart").'
    in: query
    name: upload_protocol
    type: string
tags:
  - name: projects
paths:
  '/{database}/documents:batchGet':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: >-
        Gets multiple documents.



        Documents returned by this method are not guaranteed to be returned in
        the

        same order that they were requested.
      operationId: firestore.projects.databases.documents.batchGet
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/BatchGetDocumentsRequest'
        - description: |-
            The database name. In the format:
            `projects/{project_id}/databases/{database_id}`.
          in: path
          name: database
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/BatchGetDocumentsResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
  '/{database}/documents:beginTransaction':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: Starts a new transaction.
      operationId: firestore.projects.databases.documents.beginTransaction
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/BeginTransactionRequest'
        - description: |-
            The database name. In the format:
            `projects/{project_id}/databases/{database_id}`.
          in: path
          name: database
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/BeginTransactionResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
  '/{database}/documents:commit':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: 'Commits a transaction, while optionally updating documents.'
      operationId: firestore.projects.databases.documents.commit
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CommitRequest'
        - description: |-
            The database name. In the format:
            `projects/{project_id}/databases/{database_id}`.
          in: path
          name: database
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/CommitResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
  '/{database}/documents:listen':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: Listens to changes.
      operationId: firestore.projects.databases.documents.listen
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ListenRequest'
        - description: |-
            The database name. In the format:
            `projects/{project_id}/databases/{database_id}`.
          in: path
          name: database
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListenResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
  '/{database}/documents:rollback':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: Rolls back a transaction.
      operationId: firestore.projects.databases.documents.rollback
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/RollbackRequest'
        - description: |-
            The database name. In the format:
            `projects/{project_id}/databases/{database_id}`.
          in: path
          name: database
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Empty'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
  '/{database}/documents:write':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: 'Streams batches of document updates and deletes, in order.'
      operationId: firestore.projects.databases.documents.write
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/WriteRequest'
        - description: |-
            The database name. In the format:
            `projects/{project_id}/databases/{database_id}`.
            This is only required in the first message.
          in: path
          name: database
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/WriteResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
  '/{name}':
    delete:
      description: Deletes an index.
      operationId: firestore.projects.databases.indexes.delete
      parameters:
        - description: |-
            When set to `true`, the target document must exist.
            When set to `false`, the target document must not exist.
          in: query
          name: currentDocument.exists
          type: boolean
        - description: >-
            When set, the target document must exist and have been last updated
            at

            that time.
          in: query
          name: currentDocument.updateTime
          type: string
        - description: |-
            The index name. For example:
            `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Empty'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
    get:
      description: Gets an index.
      operationId: firestore.projects.databases.indexes.get
      parameters:
        - collectionFormat: multi
          description: >-
            The list of field paths in the mask. See Document.fields for a field

            path syntax reference.
          in: query
          items:
            type: string
          name: mask.fieldPaths
          type: array
        - description: |-
            The name of the index. For example:
            `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
        - description: |-
            Reads the version of the document at the given time.
            This may not be older than 60 seconds.
          in: query
          name: readTime
          type: string
        - description: Reads the document in a transaction.
          in: query
          name: transaction
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Index'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    patch:
      description: Updates or inserts a document.
      operationId: firestore.projects.databases.documents.patch
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Document'
        - description: |-
            When set to `true`, the target document must exist.
            When set to `false`, the target document must not exist.
          in: query
          name: currentDocument.exists
          type: boolean
        - description: >-
            When set, the target document must exist and have been last updated
            at

            that time.
          in: query
          name: currentDocument.updateTime
          type: string
        - collectionFormat: multi
          description: >-
            The list of field paths in the mask. See Document.fields for a field

            path syntax reference.
          in: query
          items:
            type: string
          name: mask.fieldPaths
          type: array
        - description: |-
            The resource name of the document, for example
            `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
        - collectionFormat: multi
          description: >-
            The list of field paths in the mask. See Document.fields for a field

            path syntax reference.
          in: query
          items:
            type: string
          name: updateMask.fieldPaths
          type: array
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Document'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
  '/{parent}/indexes':
    get:
      description: Lists the indexes that match the specified filters.
      operationId: firestore.projects.databases.indexes.list
      parameters:
        - in: query
          name: filter
          type: string
        - description: The standard List page size.
          in: query
          name: pageSize
          type: integer
        - description: The standard List page token.
          in: query
          name: pageToken
          type: string
        - description: |-
            The database name. For example:
            `projects/{project_id}/databases/{database_id}`
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListIndexesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: >-
        Creates the specified index.

        A newly created index's initial state is `CREATING`. On completion of
        the

        returned google.longrunning.Operation, the state will be `READY`.

        If the index already exists, the call will return an `ALREADY_EXISTS`

        status.



        During creation, the process could result in an error, in which case the

        index will move to the `ERROR` state. The process can be recovered by

        fixing the data that caused the error, removing the index with

        delete, then re-creating the index with

        create.



        Indexes with a single field cannot be created.
      operationId: firestore.projects.databases.indexes.create
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Index'
        - description: |-
            The name of the database this index will apply to. For example:
            `projects/{project_id}/databases/{database_id}`
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Operation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
  '/{parent}/{collectionId}':
    get:
      description: Lists documents.
      operationId: firestore.projects.databases.documents.list
      parameters:
        - description: >-
            The collection ID, relative to `parent`, to list. For example:
            `chatrooms`

            or `messages`.
          in: path
          name: collectionId
          required: true
          type: string
        - collectionFormat: multi
          description: >-
            The list of field paths in the mask. See Document.fields for a field

            path syntax reference.
          in: query
          items:
            type: string
          name: mask.fieldPaths
          type: array
        - description: 'The order to sort results by. For example: `priority desc, name`.'
          in: query
          name: orderBy
          type: string
        - description: The maximum number of documents to return.
          in: query
          name: pageSize
          type: integer
        - description: 'The `next_page_token` value returned from a previous List request, if any.'
          in: query
          name: pageToken
          type: string
        - description: >-
            The parent resource name. In the format:

            `projects/{project_id}/databases/{database_id}/documents` or

            `projects/{project_id}/databases/{database_id}/documents/{document_path}`.

            For example:

            `projects/my-project/databases/my-database/documents` or

            `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
        - description: |-
            Reads documents as they were at the given time.
            This may not be older than 60 seconds.
          in: query
          name: readTime
          type: string
        - description: >-
            If the list should show missing documents. A missing document is a

            document that does not exist but has sub-documents. These documents
            will

            be returned with a key but will not have fields,
            Document.create_time,

            or Document.update_time set.



            Requests with `show_missing` may not specify `where` or

            `order_by`.
          in: query
          name: showMissing
          type: boolean
        - description: Reads documents in a transaction.
          in: query
          name: transaction
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListDocumentsResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: Creates a new document.
      operationId: firestore.projects.databases.documents.createDocument
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Document'
        - description: 'The collection ID, relative to `parent`, to list. For example: `chatrooms`.'
          in: path
          name: collectionId
          required: true
          type: string
        - description: |-
            The client-assigned document ID to use for this document.

            Optional. If not specified, an ID will be assigned by the service.
          in: query
          name: documentId
          type: string
        - collectionFormat: multi
          description: >-
            The list of field paths in the mask. See Document.fields for a field

            path syntax reference.
          in: query
          items:
            type: string
          name: mask.fieldPaths
          type: array
        - description: |-
            The parent resource. For example:
            `projects/{project_id}/databases/{database_id}/documents` or
            `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Document'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
  '/{parent}:listCollectionIds':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: Lists all the collection IDs underneath a document.
      operationId: firestore.projects.databases.documents.listCollectionIds
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ListCollectionIdsRequest'
        - description: >-
            The parent document. In the format:

            `projects/{project_id}/databases/{database_id}/documents/{document_path}`.

            For example:

            `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListCollectionIdsResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
  '/{parent}:runQuery':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: Runs a query.
      operationId: firestore.projects.databases.documents.runQuery
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/RunQueryRequest'
        - description: >-
            The parent resource name. In the format:

            `projects/{project_id}/databases/{database_id}/documents` or

            `projects/{project_id}/databases/{database_id}/documents/{document_path}`.

            For example:

            `projects/my-project/databases/my-database/documents` or

            `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/RunQueryResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
definitions:
  ArrayValue:
    description: An array value.
    properties:
      values:
        description: Values in the array.
        items:
          $ref: '#/definitions/Value'
        type: array
    type: object
  BatchGetDocumentsRequest:
    description: The request for Firestore.BatchGetDocuments.
    properties:
      documents:
        description: >-
          The names of the documents to retrieve. In the format:

          `projects/{project_id}/databases/{database_id}/documents/{document_path}`.

          The request will fail if any of the document is not a child resource of
          the

          given `database`. Duplicate names will be elided.
        items:
          type: string
        type: array
      mask:
        $ref: '#/definitions/DocumentMask'
        description: >-
          The fields to return. If not set, returns all fields.



          If a document has a field that is not present in this mask, that field
          will

          not be returned in the response.
      newTransaction:
        $ref: '#/definitions/TransactionOptions'
        description: |-
          Starts a new transaction and reads the documents.
          Defaults to a read-only transaction.
          The new transaction ID will be returned as the first response in the
          stream.
      readTime:
        description: |-
          Reads documents as they were at the given time.
          This may not be older than 60 seconds.
        format: google-datetime
        type: string
      transaction:
        description: Reads documents in a transaction.
        format: byte
        type: string
    type: object
  BatchGetDocumentsResponse:
    description: The streamed response for Firestore.BatchGetDocuments.
    properties:
      found:
        $ref: '#/definitions/Document'
        description: A document that was requested.
      missing:
        description: |-
          A document name that was requested but does not exist. In the format:
          `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
        type: string
      readTime:
        description: >-
          The time at which the document was read.

          This may be monotically increasing, in this case the previous documents
          in

          the result stream are guaranteed not to have changed between their

          read_time and this one.
        format: google-datetime
        type: string
      transaction:
        description: |-
          The transaction that was started as part of this request.
          Will only be set in the first response, and only if
          BatchGetDocumentsRequest.new_transaction was set in the request.
        format: byte
        type: string
    type: object
  BeginTransactionRequest:
    description: The request for Firestore.BeginTransaction.
    properties:
      options:
        $ref: '#/definitions/TransactionOptions'
        description: |-
          The options for the transaction.
          Defaults to a read-write transaction.
    type: object
  BeginTransactionResponse:
    description: The response for Firestore.BeginTransaction.
    properties:
      transaction:
        description: The transaction that was started.
        format: byte
        type: string
    type: object
  CollectionSelector:
    description: 'A selection of a collection, such as `messages as m1`.'
    properties:
      allDescendants:
        description: |-
          When false, selects only collections that are immediate children of
          the `parent` specified in the containing `RunQueryRequest`.
          When true, selects all descendant collections.
        type: boolean
      collectionId:
        description: |-
          The collection ID.
          When set, selects only collections with this ID.
        type: string
    type: object
  CommitRequest:
    description: The request for Firestore.Commit.
    properties:
      transaction:
        description: 'If set, applies all writes in this transaction, and commits it.'
        format: byte
        type: string
      writes:
        description: |-
          The writes to apply.

          Always executed atomically and in order.
        items:
          $ref: '#/definitions/Write'
        type: array
    type: object
  CommitResponse:
    description: The response for Firestore.Commit.
    properties:
      commitTime:
        description: The time at which the commit occurred.
        format: google-datetime
        type: string
      writeResults:
        description: |-
          The result of applying the writes.

          This i-th write result corresponds to the i-th write in the
          request.
        items:
          $ref: '#/definitions/WriteResult'
        type: array
    type: object
  CompositeFilter:
    description: A filter that merges multiple other filters using the given operator.
    properties:
      filters:
        description: |-
          The list of filters to combine.
          Must contain at least one filter.
        items:
          $ref: '#/definitions/Filter'
        type: array
      op:
        description: The operator for combining multiple filters.
        enum:
          - OPERATOR_UNSPECIFIED
          - AND
        type: string
    type: object
  Cursor:
    description: A position in a query result set.
    properties:
      before:
        description: >-
          If the position is just before or just after the given values,
          relative

          to the sort order defined by the query.
        type: boolean
      values:
        description: |-
          The values that represent a position, in the order they appear in
          the order by clause of a query.

          Can contain fewer values than specified in the order by clause.
        items:
          $ref: '#/definitions/Value'
        type: array
    type: object
  Document:
    description: |-
      A Firestore document.

      Must not exceed 1 MiB - 4 bytes.
    properties:
      createTime:
        description: >-
          Output only. The time at which the document was created.



          This value increases monotonically when a document is deleted then

          recreated. It can also be compared to values from other documents and

          the `read_time` of a query.
        format: google-datetime
        type: string
      fields:
        additionalProperties:
          $ref: '#/definitions/Value'
        description: "The document's fields.\n\nThe map keys represent field names.\n\nA simple field name contains only characters `a` to `z`, `A` to `Z`,\n`0` to `9`, or `_`, and must not start with `0` to `9`. For example,\n`foo_bar_17`.\n\nField names matching the regular expression `__.*__` are reserved. Reserved\nfield names are forbidden except in certain documented contexts. The map\nkeys, represented as UTF-8, must not exceed 1,500 bytes and cannot be\nempty.\n\nField paths may be used in other contexts to refer to structured fields\ndefined here. For `map_value`, the field path is represented by the simple\nor quoted field names of the containing fields, delimited by `.`. For\nexample, the structured field\n`\"foo\" : { map_value: { \"x&y\" : { string_value: \"hello\" }}}` would be\nrepresented by the field path `foo.x&y`.\n\nWithin a field path, a quoted field name starts and ends with `` ` `` and\nmay contain any character. Some characters, including `` ` ``, must be\nescaped using a `\\`. For example, `` `x&y` `` represents `x&y` and\n`` `bak\\`tik` `` represents `` bak`tik ``."
        type: object
      name:
        description: |-
          The resource name of the document, for example
          `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
        type: string
      updateTime:
        description: |-
          Output only. The time at which the document was last changed.

          This value is initally set to the `create_time` then increases
          monotonically with each change to the document. It can also be
          compared to values from other documents and the `read_time` of a query.
        format: google-datetime
        type: string
    type: object
  DocumentChange:
    description: |-
      A Document has changed.

      May be the result of multiple writes, including deletes, that
      ultimately resulted in a new value for the Document.

      Multiple DocumentChange messages may be returned for the same logical
      change, if multiple targets are affected.
    properties:
      document:
        $ref: '#/definitions/Document'
        description: |-
          The new state of the Document.

          If `mask` is set, contains only fields that were updated or added.
      removedTargetIds:
        description: A set of target IDs for targets that no longer match this document.
        items:
          format: int32
          type: integer
        type: array
      targetIds:
        description: A set of target IDs of targets that match this document.
        items:
          format: int32
          type: integer
        type: array
    type: object
  DocumentDelete:
    description: |-
      A Document has been deleted.

      May be the result of multiple writes, including updates, the
      last of which deleted the Document.

      Multiple DocumentDelete messages may be returned for the same logical
      delete, if multiple targets are affected.
    properties:
      document:
        description: The resource name of the Document that was deleted.
        type: string
      readTime:
        description: |-
          The read timestamp at which the delete was observed.

          Greater or equal to the `commit_time` of the delete.
        format: google-datetime
        type: string
      removedTargetIds:
        description: A set of target IDs for targets that previously matched this entity.
        items:
          format: int32
          type: integer
        type: array
    type: object
  DocumentMask:
    description: >-
      A set of field paths on a document.

      Used to restrict a get or update operation on a document to a subset of
      its

      fields.

      This is different from standard field masks, as this is always scoped to a

      Document, and takes in account the dynamic nature of Value.
    properties:
      fieldPaths:
        description: |-
          The list of field paths in the mask. See Document.fields for a field
          path syntax reference.
        items:
          type: string
        type: array
    type: object
  DocumentRemove:
    description: >-
      A Document has been removed from the view of the targets.



      Sent if the document is no longer relevant to a target and is out of view.

      Can be sent instead of a DocumentDelete or a DocumentChange if the server

      can not send the new value of the document.



      Multiple DocumentRemove messages may be returned for the same logical

      write or delete, if multiple targets are affected.
    properties:
      document:
        description: The resource name of the Document that has gone out of view.
        type: string
      readTime:
        description: |-
          The read timestamp at which the remove was observed.

          Greater or equal to the `commit_time` of the change/delete/remove.
        format: google-datetime
        type: string
      removedTargetIds:
        description: A set of target IDs for targets that previously matched this document.
        items:
          format: int32
          type: integer
        type: array
    type: object
  DocumentTransform:
    description: A transformation of a document.
    properties:
      document:
        description: The name of the document to transform.
        type: string
      fieldTransforms:
        description: >-
          The list of transformations to apply to the fields of the document, in

          order.

          This must not be empty.
        items:
          $ref: '#/definitions/FieldTransform'
        type: array
    type: object
  DocumentsTarget:
    description: A target specified by a set of documents names.
    properties:
      documents:
        description: >-
          The names of the documents to retrieve. In the format:

          `projects/{project_id}/databases/{database_id}/documents/{document_path}`.

          The request will fail if any of the document is not a child resource
          of

          the given `database`. Duplicate names will be elided.
        items:
          type: string
        type: array
    type: object
  Empty:
    description: >-
      A generic empty message that you can re-use to avoid defining duplicated

      empty messages in your APIs. A typical example is to use it as the request

      or the response type of an API method. For instance:



          service Foo {

            rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);

          }



      The JSON representation for `Empty` is empty JSON object `{}`.
    properties: {}
    type: object
  ExistenceFilter:
    description: A digest of all the documents that match a given target.
    properties:
      count:
        description: >-
          The total count of documents that match target_id.



          If different from the count of documents in the client that match, the

          client must manually determine which documents no longer match the
          target.
        format: int32
        type: integer
      targetId:
        description: The target ID to which this filter applies.
        format: int32
        type: integer
    type: object
  FieldFilter:
    description: A filter on a specific field.
    properties:
      field:
        $ref: '#/definitions/FieldReference'
        description: The field to filter by.
      op:
        description: The operator to filter by.
        enum:
          - OPERATOR_UNSPECIFIED
          - LESS_THAN
          - LESS_THAN_OR_EQUAL
          - GREATER_THAN
          - GREATER_THAN_OR_EQUAL
          - EQUAL
        type: string
      value:
        $ref: '#/definitions/Value'
        description: The value to compare to.
    type: object
  FieldReference:
    description: 'A reference to a field, such as `max(messages.time) as max_time`.'
    properties:
      fieldPath:
        type: string
    type: object
  FieldTransform:
    description: A transformation of a field of the document.
    properties:
      fieldPath:
        description: |-
          The path of the field. See Document.fields for the field path syntax
          reference.
        type: string
      setToServerValue:
        description: Sets the field to the given server value.
        enum:
          - SERVER_VALUE_UNSPECIFIED
          - REQUEST_TIME
        type: string
    type: object
  Filter:
    description: A filter.
    properties:
      compositeFilter:
        $ref: '#/definitions/CompositeFilter'
        description: A composite filter.
      fieldFilter:
        $ref: '#/definitions/FieldFilter'
        description: A filter on a document field.
      unaryFilter:
        $ref: '#/definitions/UnaryFilter'
        description: A filter that takes exactly one argument.
    type: object
  Index:
    description: An index definition.
    properties:
      collectionId:
        description: The collection ID to which this index applies. Required.
        type: string
      fields:
        description: The fields to index.
        items:
          $ref: '#/definitions/IndexField'
        type: array
      name:
        description: |-
          The resource name of the index.
          Output only.
        type: string
      state:
        description: |-
          The state of the index.
          Output only.
        enum:
          - STATE_UNSPECIFIED
          - CREATING
          - READY
          - ERROR
        type: string
    type: object
  IndexField:
    description: A field of an index.
    properties:
      fieldPath:
        description: >-
          The path of the field. Must match the field path specification
          described

          by google.firestore.v1beta1.Document.fields.

          Special field path `__name__` may be used by itself or at the end of a

          path. `__type__` may be used only at the end of path.
        type: string
      mode:
        description: "The field's mode."
        enum:
          - MODE_UNSPECIFIED
          - ASCENDING
          - DESCENDING
        type: string
    type: object
  LatLng:
    description: >-
      An object representing a latitude/longitude pair. This is expressed as
      a pair

      of doubles representing degrees latitude and degrees longitude. Unless

      specified otherwise, this must conform to the

      <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84

      standard</a>. Values must be within normalized ranges.
    properties:
      latitude:
        description: 'The latitude in degrees. It must be in the range [-90.0, +90.0].'
        format: double
        type: number
      longitude:
        description: 'The longitude in degrees. It must be in the range [-180.0, +180.0].'
        format: double
        type: number
    type: object
  ListCollectionIdsRequest:
    description: The request for Firestore.ListCollectionIds.
    properties:
      pageSize:
        description: The maximum number of results to return.
        format: int32
        type: integer
      pageToken:
        description: |-
          A page token. Must be a value from
          ListCollectionIdsResponse.
        type: string
    type: object
  ListCollectionIdsResponse:
    description: The response from Firestore.ListCollectionIds.
    properties:
      collectionIds:
        description: The collection ids.
        items:
          type: string
        type: array
      nextPageToken:
        description: A page token that may be used to continue the list.
        type: string
    type: object
  ListDocumentsResponse:
    description: The response for Firestore.ListDocuments.
    properties:
      documents:
        description: The Documents found.
        items:
          $ref: '#/definitions/Document'
        type: array
      nextPageToken:
        description: The next page token.
        type: string
    type: object
  ListIndexesResponse:
    description: The response for FirestoreAdmin.ListIndexes.
    properties:
      indexes:
        description: The indexes.
        items:
          $ref: '#/definitions/Index'
        type: array
      nextPageToken:
        description: The standard List next-page token.
        type: string
    type: object
  ListenRequest:
    description: A request for Firestore.Listen
    properties:
      addTarget:
        $ref: '#/definitions/Target'
        description: A target to add to this stream.
      labels:
        additionalProperties:
          type: string
        description: Labels associated with this target change.
        type: object
      removeTarget:
        description: The ID of a target to remove from this stream.
        format: int32
        type: integer
    type: object
  ListenResponse:
    description: The response for Firestore.Listen.
    properties:
      documentChange:
        $ref: '#/definitions/DocumentChange'
        description: A Document has changed.
      documentDelete:
        $ref: '#/definitions/DocumentDelete'
        description: A Document has been deleted.
      documentRemove:
        $ref: '#/definitions/DocumentRemove'
        description: |-
          A Document has been removed from a target (because it is no longer
          relevant to that target).
      filter:
        $ref: '#/definitions/ExistenceFilter'
        description: >-
          A filter to apply to the set of documents previously returned for the

          given target.



          Returned when documents may have been removed from the given target,
          but

          the exact documents are unknown.
      targetChange:
        $ref: '#/definitions/TargetChange'
        description: Targets have changed.
    type: object
  MapValue:
    description: A map value.
    properties:
      fields:
        additionalProperties:
          $ref: '#/definitions/Value'
        description: >-
          The map's fields.



          The map keys represent field names. Field names matching the regular

          expression `__.*__` are reserved. Reserved field names are forbidden
          except

          in certain documented contexts. The map keys, represented as UTF-8,
          must

          not exceed 1,500 bytes and cannot be empty.
        type: object
    type: object
  Operation:
    description: |-
      This resource represents a long-running operation that is the result of a
      network API call.
    properties:
      done:
        description: >-
          If the value is `false`, it means the operation is still in progress.

          If `true`, the operation is completed, and either `error` or `response`
          is

          available.
        type: boolean
      error:
        $ref: '#/definitions/Status'
        description: The error result of the operation in case of failure or cancellation.
      metadata:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: >-
          Service-specific metadata associated with the operation.  It typically

          contains progress information and common metadata such as create time.

          Some services might not provide such metadata.  Any method that returns
          a

          long-running operation should document the metadata type, if any.
        type: object
      name:
        description: >-
          The server-assigned name, which is only unique within the same service
          that

          originally returns it. If you use the default HTTP mapping, the

          `name` should have the format of `operations/some/unique/name`.
        type: string
      response:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: >-
          The normal response of the operation in case of success.  If the
          original

          method returns no data on success, such as `Delete`, the response is

          `google.protobuf.Empty`.  If the original method is standard

          `Get`/`Create`/`Update`, the response should be the resource.  For
          other

          methods, the response should have the type `XxxResponse`, where `Xxx`

          is the original method name.  For example, if the original method name

          is `TakeSnapshot()`, the inferred response type is

          `TakeSnapshotResponse`.
        type: object
    type: object
  Order:
    description: An order on a field.
    properties:
      direction:
        description: The direction to order by. Defaults to `ASCENDING`.
        enum:
          - DIRECTION_UNSPECIFIED
          - ASCENDING
          - DESCENDING
        type: string
      field:
        $ref: '#/definitions/FieldReference'
        description: The field to order by.
    type: object
  Precondition:
    description: 'A precondition on a document, used for conditional operations.'
    properties:
      exists:
        description: |-
          When set to `true`, the target document must exist.
          When set to `false`, the target document must not exist.
        type: boolean
      updateTime:
        description: >-
          When set, the target document must exist and have been last updated at

          that time.
        format: google-datetime
        type: string
    type: object
  Projection:
    description: "The projection of document's fields to return."
    properties:
      fields:
        description: |-
          The fields to return.

          If empty, all fields are returned. To only return the name
          of the document, use `['__name__']`.
        items:
          $ref: '#/definitions/FieldReference'
        type: array
    type: object
  QueryTarget:
    description: A target specified by a query.
    properties:
      parent:
        description: >-
          The parent resource name. In the format:

          `projects/{project_id}/databases/{database_id}/documents` or

          `projects/{project_id}/databases/{database_id}/documents/{document_path}`.

          For example:

          `projects/my-project/databases/my-database/documents` or

          `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
        type: string
      structuredQuery:
        $ref: '#/definitions/StructuredQuery'
        description: A structured query.
    type: object
  ReadOnly:
    description: Options for a transaction that can only be used to read documents.
    properties:
      readTime:
        description: |-
          Reads documents at the given time.
          This may not be older than 60 seconds.
        format: google-datetime
        type: string
    type: object
  ReadWrite:
    description: Options for a transaction that can be used to read and write documents.
    properties:
      retryTransaction:
        description: An optional transaction to retry.
        format: byte
        type: string
    type: object
  RollbackRequest:
    description: The request for Firestore.Rollback.
    properties:
      transaction:
        description: The transaction to roll back.
        format: byte
        type: string
    type: object
  RunQueryRequest:
    description: The request for Firestore.RunQuery.
    properties:
      newTransaction:
        $ref: '#/definitions/TransactionOptions'
        description: |-
          Starts a new transaction and reads the documents.
          Defaults to a read-only transaction.
          The new transaction ID will be returned as the first response in the
          stream.
      readTime:
        description: |-
          Reads documents as they were at the given time.
          This may not be older than 60 seconds.
        format: google-datetime
        type: string
      structuredQuery:
        $ref: '#/definitions/StructuredQuery'
        description: A structured query.
      transaction:
        description: Reads documents in a transaction.
        format: byte
        type: string
    type: object
  RunQueryResponse:
    description: The response for Firestore.RunQuery.
    properties:
      document:
        $ref: '#/definitions/Document'
        description: |-
          A query result.
          Not set when reporting partial progress.
      readTime:
        description: >-
          The time at which the document was read. This may be monotonically

          increasing; in this case, the previous documents in the result stream
          are

          guaranteed not to have changed between their `read_time` and this one.



          If the query returns no results, a response with `read_time` and no

          `document` will be sent, and this represents the time at which the
          query

          was run.
        format: google-datetime
        type: string
      skippedResults:
        description: |-
          The number of results that have been skipped due to an offset between
          the last response and the current response.
        format: int32
        type: integer
      transaction:
        description: |-
          The transaction that was started as part of this request.
          Can only be set in the first response, and only if
          RunQueryRequest.new_transaction was set in the request.
          If set, no other fields will be set in this response.
        format: byte
        type: string
    type: object
  Status:
    description: >-
      The `Status` type defines a logical error model that is suitable for
      different

      programming environments, including REST APIs and RPC APIs. It is used by

      [gRPC](https://github.com/grpc). The error model is designed to be:



      - Simple to use and understand for most users

      - Flexible enough to meet unexpected needs



      # Overview



      The `Status` message contains three pieces of data: error code, error
      message,

      and error details. The error code should be an enum value of

      google.rpc.Code, but it may accept additional error codes if needed.  The

      error message should be a developer-facing English message that helps

      developers *understand* and *resolve* the error. If a localized
      user-facing

      error message is needed, put the localized message in the error details or

      localize it in the client. The optional error details may contain
      arbitrary

      information about the error. There is a predefined set of error detail
      types

      in the package `google.rpc` that can be used for common error conditions.



      # Language mapping



      The `Status` message is the logical representation of the error model, but
      it

      is not necessarily the actual wire format. When the `Status` message is

      exposed in different client libraries and different wire protocols, it can
      be

      mapped differently. For example, it will likely be mapped to some
      exceptions

      in Java, but more likely mapped to some error codes in C.



      # Other uses



      The error model and the `Status` message can be used in a variety of

      environments, either with or without APIs, to provide a

      consistent developer experience across different environments.



      Example uses of this error model include:



      - Partial errors. If a service needs to return partial errors to the
      client,

          it may embed the `Status` in the normal response to indicate the
      partial

          errors.



      - Workflow errors. A typical workflow has multiple steps. Each step may

          have a `Status` message for error reporting.



      - Batch operations. If a client uses batch request and batch response, the

          `Status` message should be used directly inside batch response, one
      for

          each error sub-response.



      - Asynchronous operations. If an API call embeds asynchronous operation

          results in its response, the status of those operations should be

          represented directly using the `Status` message.



      - Logging. If some API errors are stored in logs, the message `Status`
      could

          be used directly after any stripping needed for security/privacy
      reasons.
    properties:
      code:
        description: 'The status code, which should be an enum value of google.rpc.Code.'
        format: int32
        type: integer
      details:
        description: >-
          A list of messages that carry the error details.  There is a common set
          of

          message types for APIs to use.
        items:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type: array
      message:
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          google.rpc.Status.details field, or localized by the client.
        type: string
    type: object
  StructuredQuery:
    description: A Firestore query.
    properties:
      endAt:
        $ref: '#/definitions/Cursor'
        description: A end point for the query results.
      from:
        description: The collections to query.
        items:
          $ref: '#/definitions/CollectionSelector'
        type: array
      limit:
        description: |-
          The maximum number of results to return.

          Applies after all other constraints.
          Must be >= 0 if specified.
        format: int32
        type: integer
      offset:
        description: >-
          The number of results to skip.



          Applies before limit, but after all other constraints. Must be >= 0 if

          specified.
        format: int32
        type: integer
      orderBy:
        description: >-
          The order to apply to the query results.



          Firestore guarantees a stable ordering through the following rules:



           * Any field required to appear in `order_by`, that is not already

             specified in `order_by`, is appended to the order in field name
          order

             by default.

           * If an order on `__name__` is not specified, it is appended by
          default.



          Fields are appended with the same sort direction as the last order

          specified, or 'ASCENDING' if no order was specified. For example:



           * `SELECT * FROM Foo ORDER BY A` becomes

             `SELECT * FROM Foo ORDER BY A, __name__`

           * `SELECT * FROM Foo ORDER BY A DESC` becomes

             `SELECT * FROM Foo ORDER BY A DESC, __name__ DESC`

           * `SELECT * FROM Foo WHERE A > 1` becomes

             `SELECT * FROM Foo WHERE A > 1 ORDER BY A, __name__`
        items:
          $ref: '#/definitions/Order'
        type: array
      select:
        $ref: '#/definitions/Projection'
        description: The projection to return.
      startAt:
        $ref: '#/definitions/Cursor'
        description: A starting point for the query results.
      where:
        $ref: '#/definitions/Filter'
        description: The filter to apply.
    type: object
  Target:
    description: A specification of a set of documents to listen to.
    properties:
      documents:
        $ref: '#/definitions/DocumentsTarget'
        description: A target specified by a set of document names.
      once:
        description: If the target should be removed once it is current and consistent.
        type: boolean
      query:
        $ref: '#/definitions/QueryTarget'
        description: A target specified by a query.
      readTime:
        description: |-
          Start listening after a specific `read_time`.

          The client must know the state of matching documents at this time.
        format: google-datetime
        type: string
      resumeToken:
        description: |-
          A resume token from a prior TargetChange for an identical target.

          Using a resume token with a different target is unsupported and may fail.
        format: byte
        type: string
      targetId:
        description: >-
          A client provided target ID.



          If not set, the server will assign an ID for the target.



          Used for resuming a target without changing IDs. The IDs can either be

          client-assigned or be server-assigned in a previous stream. All
          targets

          with client provided IDs must be added before adding a target that
          needs

          a server-assigned id.
        format: int32
        type: integer
    type: object
  TargetChange:
    description: Targets being watched have changed.
    properties:
      cause:
        $ref: '#/definitions/Status'
        description: 'The error that resulted in this change, if applicable.'
      readTime:
        description: >-
          The consistent `read_time` for the given `target_ids` (omitted when
          the

          target_ids are not at a consistent snapshot).



          The stream is guaranteed to send a `read_time` with `target_ids` empty

          whenever the entire stream reaches a new consistent snapshot. ADD,

          CURRENT, and RESET messages are guaranteed to (eventually) result in a

          new consistent snapshot (while NO_CHANGE and REMOVE messages are not).



          For a given stream, `read_time` is guaranteed to be monotonically

          increasing.
        format: google-datetime
        type: string
      resumeToken:
        description: >-
          A token that can be used to resume the stream for the given
          `target_ids`,

          or all targets if `target_ids` is empty.



          Not set on every target change.
        format: byte
        type: string
      targetChangeType:
        description: The type of change that occurred.
        enum:
          - NO_CHANGE
          - ADD
          - REMOVE
          - CURRENT
          - RESET
        type: string
      targetIds:
        description: >-
          The target IDs of targets that have changed.



          If empty, the change applies to all targets.



          For `target_change_type=ADD`, the order of the target IDs matches the
          order

          of the requests to add the targets. This allows clients to
          unambiguously

          associate server-assigned target IDs with added targets.



          For other states, the order of the target IDs is not defined.
        items:
          format: int32
          type: integer
        type: array
    type: object
  TransactionOptions:
    description: Options for creating a new transaction.
    properties:
      readOnly:
        $ref: '#/definitions/ReadOnly'
        description: The transaction can only be used for read operations.
      readWrite:
        $ref: '#/definitions/ReadWrite'
        description: The transaction can be used for both read and write operations.
    type: object
  UnaryFilter:
    description: A filter with a single operand.
    properties:
      field:
        $ref: '#/definitions/FieldReference'
        description: The field to which to apply the operator.
      op:
        description: The unary operator to apply.
        enum:
          - OPERATOR_UNSPECIFIED
          - IS_NAN
          - IS_NULL
        type: string
    type: object
  Value:
    description: A message that can hold any of the supported value types.
    properties:
      arrayValue:
        $ref: '#/definitions/ArrayValue'
        description: |-
          An array value.

          Cannot contain another array value.
      booleanValue:
        description: A boolean value.
        type: boolean
      bytesValue:
        description: |-
          A bytes value.

          Must not exceed 1 MiB - 89 bytes.
          Only the first 1,500 bytes are considered by queries.
        format: byte
        type: string
      doubleValue:
        description: A double value.
        format: double
        type: number
      geoPointValue:
        $ref: '#/definitions/LatLng'
        description: A geo point value representing a point on the surface of Earth.
      integerValue:
        description: An integer value.
        format: int64
        type: string
      mapValue:
        $ref: '#/definitions/MapValue'
        description: A map value.
      nullValue:
        description: A null value.
        enum:
          - NULL_VALUE
        type: string
      referenceValue:
        description: |-
          A reference to a document. For example:
          `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
        type: string
      stringValue:
        description: >-
          A string value.



          The string, represented as UTF-8, must not exceed 1 MiB - 89 bytes.

          Only the first 1,500 bytes of the UTF-8 representation are considered
          by

          queries.
        type: string
      timestampValue:
        description: >-
          A timestamp value.



          Precise only to microseconds. When stored, any additional precision is

          rounded down.
        format: google-datetime
        type: string
    type: object
  Write:
    description: A write on a document.
    properties:
      currentDocument:
        $ref: '#/definitions/Precondition'
        description: |-
          An optional precondition on the document.

          The write will fail if this is set and not met by the target document.
      delete:
        description: |-
          A document name to delete. In the format:
          `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
        type: string
      transform:
        $ref: '#/definitions/DocumentTransform'
        description: >-
          Applies a tranformation to a document.

          At most one `transform` per document is allowed in a given request.

          An `update` cannot follow a `transform` on the same document in
          a given

          request.
      update:
        $ref: '#/definitions/Document'
        description: A document to write.
      updateMask:
        $ref: '#/definitions/DocumentMask'
        description: >-
          The fields to update in this write.



          This field can be set only when the operation is `update`.

          If the mask is not set for an `update` and the document exists, any

          existing data will be overwritten.

          If the mask is set and the document on the server has fields not
          covered by

          the mask, they are left unchanged.

          Fields referenced in the mask, but not present in the input document,
          are

          deleted from the document on the server.

          The field paths in this mask must not contain a reserved field name.
    type: object
  WriteRequest:
    description: >-
      The request for Firestore.Write.



      The first request creates a stream, or resumes an existing one from
      a token.



      When creating a new stream, the server replies with a response containing

      only an ID and a token, to use in the next request.



      When resuming a stream, the server first streams any responses later than
      the

      given token, then a response containing only an up-to-date token, to use
      in

      the next request.
    properties:
      labels:
        additionalProperties:
          type: string
        description: Labels associated with this write request.
        type: object
      streamId:
        description: >-
          The ID of the write stream to resume.

          This may only be set in the first message. When left empty, a new
          write

          stream will be created.
        type: string
      streamToken:
        description: >-
          A stream token that was previously sent by the server.



          The client should set this field to the token from the most recent

          WriteResponse it has received. This acknowledges that the client has

          received responses up to this token. After sending this token, earlier

          tokens may not be used anymore.



          The server may close the stream if there are too many unacknowledged

          responses.



          Leave this field unset when creating a new stream. To resume a stream
          at

          a specific point, set this field and the `stream_id` field.



          Leave this field unset when creating a new stream.
        format: byte
        type: string
      writes:
        description: |-
          The writes to apply.

          Always executed atomically and in order.
          This must be empty on the first request.
          This may be empty on the last request.
          This must not be empty on all other requests.
        items:
          $ref: '#/definitions/Write'
        type: array
    type: object
  WriteResponse:
    description: The response for Firestore.Write.
    properties:
      commitTime:
        description: The time at which the commit occurred.
        format: google-datetime
        type: string
      streamId:
        description: |-
          The ID of the stream.
          Only set on the first message, when a new stream was created.
        type: string
      streamToken:
        description: |-
          A token that represents the position of this response in the stream.
          This can be used by a client to resume the stream at this point.

          This field is always set.
        format: byte
        type: string
      writeResults:
        description: |-
          The result of applying the writes.

          This i-th write result corresponds to the i-th write in the
          request.
        items:
          $ref: '#/definitions/WriteResult'
        type: array
    type: object
  WriteResult:
    description: The result of applying a write.
    properties:
      transformResults:
        description: |-
          The results of applying each DocumentTransform.FieldTransform, in the
          same order.
        items:
          $ref: '#/definitions/Value'
        type: array
      updateTime:
        description: >-
          The last update time of the document after applying the write. Not set

          after a `delete`.



          If the write did not actually change the document, this will be the

          previous update_time.
        format: google-datetime
        type: string
    type: object