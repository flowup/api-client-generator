/* tslint:disable */

import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs/Observable';

import {
  {{#definitions}}
  {{name}},
  {{/definitions}}
} from '.';

interface HttpOptions {
  headers?: HttpHeaders,
  params?: HttpParams,
  reportProgress?: boolean,
  withCredentials?: boolean,
}

/**
 * Created with ngx-swagger-client-generator (https://github.com/flowup/ngx-swagger-client-generator)
 */
@Injectable()
export class ApiClientService {

  readonly options: HttpOptions;
  private domain: string = `{{&domain}}`;

  constructor(private http: HttpClient,
              @Optional() @Inject('domain') domain: string,
              @Optional() @Inject('httpOptions') options: HttpOptions) {

    if (domain) {
      this.domain = domain;
    }

    this.options = {
      headers: options && options.headers ? options.headers : new HttpHeaders(),
      params: options && options.params ? options.params : new HttpParams()
    };
  }

{{#methods}}
  {{&methodName}}({{#parameters}}{{&camelCaseName}}: {{typescriptType}}, {{/parameters}}options?: HttpOptions): Observable<{{&response}}> {
    const path = `{{&path}}`;
    options = {...this.options, ...options};

    {{#parameters}}
      {{#isQueryParameter}}
    if ({{&camelCaseName}}) {
          {{#isArray}}
      Object.keys({{&camelCaseName}}).map(value => {
        options.params = options.params.set('{{&name}}', `${value}`);
      });
          {{/isArray}}
          {{^isArray}}
      options.params = options.params.set('{{&name}}', String({{&camelCaseName}}));
          {{/isArray}}
    }
      {{/isQueryParameter}}
      {{#isHeaderParameter}}
    if ({{&camelCaseName}}) {
          {{#isArray}}
      Object.keys({{&camelCaseName}}).map(value => {
        options.headers = options.headers.set('{{&name}}', `${value}`);
      });
          {{/isArray}}
          {{^isArray}}
      options.headers = options.headers.set('{{&name}}', String({{&camelCaseName}}));
          {{/isArray}}
    }
      {{/isHeaderParameter}}
    {{/parameters}}
    return this.sendRequest<{{&response}}>('{{methodType}}', path, options{{#parameters}}{{#isBodyParameter}}, JSON.stringify({{&camelCaseName}}){{/isBodyParameter}}{{/parameters}});
  }

{{/methods}}
  private sendRequest<T>(method: string, path: string, options: HttpOptions, body?: any): Observable<T> {
    if (method === 'GET') {
      return this.http.get<T>(`${this.domain}${path}`, options);
    } else if (method === 'PUT') {
      return this.http.put<T>(`${this.domain}${path}`, body, options);
    } else if (method === 'POST') {
      return this.http.post<T>(`${this.domain}${path}`, body, options);
    } else if (method === 'DELETE') {
      return this.http.delete<T>(`${this.domain}${path}`, options);
    } else {
      console.error('Unsupported request: ' + method);
      return Observable.throw('Unsupported request: ' + method);
    }
  }
}
