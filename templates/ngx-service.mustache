/* tslint:disable */

import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { Observable, throwError } from 'rxjs';
import { DefaultHttpOptions, HttpOptions } from './';

{{#definitions.length}}
import * as models from './models';
{{/definitions.length}}

export const USE_DOMAIN = new InjectionToken<string>('USE_DOMAIN');
export const USE_HTTP_OPTIONS = new InjectionToken<HttpOptions>('USE_HTTP_OPTIONS');

type APIHttpOptions = HttpOptions & {
  headers: HttpHeaders;
  params: HttpParams;
};

/**
 * Created with https://github.com/flowup/api-client-generator
 */
@Injectable()
export class APIClient {

  private readonly options: APIHttpOptions;

  private readonly domain: string = `{{&domain}}`;

  constructor(private readonly http: HttpClient,
              @Optional() @Inject(USE_DOMAIN) domain: string,
              @Optional() @Inject(USE_HTTP_OPTIONS) options: DefaultHttpOptions) {

    if (domain) {
      this.domain = domain;
    }

    this.options = {
      headers: new HttpHeaders(options && options.headers ? options.headers : {}),
      params: new HttpParams(options && options.params ? options.params : {}),
      ...(options && options.reportProgress ? { reportProgress: options.reportProgress } : {}),
      ...(options && options.withCredentials ? { withCredentials: options.withCredentials } : {})
    };
  }

{{#methods}}
  {{&methodName}}(
  {{#parameters.length}}
    args: {
      {{#parameters}}
      {{&camelCaseName}}{{^isRequired}}?{{/isRequired}}: {{importType}}{{#isArray}}[]{{/isArray}},
      {{/parameters}}
    },
  {{/parameters.length}}
    requestHttpOptions?: HttpOptions
  ): Observable<{{&response}}> {
    const path = `{{&path}}`;
    const options: APIHttpOptions = {...this.options, ...requestHttpOptions};

    {{#parameters}}
      {{#isQueryParameter}}
    if ('{{&camelCaseName}}' in args) {
          {{#isArray}}
      if (args.{{&camelCaseName}} && args.{{&camelCaseName}}.length) {
        options.params = args.{{&camelCaseName}}.reduce<HttpParams>((acc, cur) => acc.append('{{&name}}', `${cur}`), options.params);
      }
          {{/isArray}}
          {{^isArray}}
      options.params = options.params.set('{{&name}}', String(args.{{&camelCaseName}}));
          {{/isArray}}
    }
      {{/isQueryParameter}}
      {{#isHeaderParameter}}
    if ('{{&camelCaseName}}' in args) {
          {{#isArray}}
      if (args.{{&camelCaseName}} && args.{{&camelCaseName}}.length) {
        options.headers = options.headers.set('{{&name}}', args.{{&camelCaseName}}.map(value => `${value}`));
      }
          {{/isArray}}
          {{^isArray}}
      options.headers = options.headers.set('{{&name}}', String(args.{{&camelCaseName}}));
          {{/isArray}}
    }
      {{/isHeaderParameter}}
    {{/parameters}}
    return this.sendRequest<{{&response}}>('{{methodType}}', path, options{{#parameters}}{{#isBodyParameter}}, JSON.stringify(args.{{&camelCaseName}}){{/isBodyParameter}}{{#isFormParameter}}, JSON.stringify(args.{{&camelCaseName}}){{/isFormParameter}}{{/parameters}});
  }

{{/methods}}
  private sendRequest<T>(method: string, path: string, options: HttpOptions, body?: any): Observable<T> {
    switch (method) {
      case 'DELETE':
        return this.http.delete<T>(`${this.domain}${path}`, options);
      case 'GET':
        return this.http.get<T>(`${this.domain}${path}`, options);
      case 'HEAD':
        return this.http.head<T>(`${this.domain}${path}`, options);
      case 'OPTIONS':
        return this.http.options<T>(`${this.domain}${path}`, options);
      case 'PATCH':
        return this.http.patch<T>(`${this.domain}${path}`, body, options);
      case 'POST':
        return this.http.post<T>(`${this.domain}${path}`, body, options);
      case 'PUT':
        return this.http.put<T>(`${this.domain}${path}`, body, options);
      default:
        console.error(`Unsupported request: ${method}`);
        return throwError(`Unsupported request: ${method}`);
    }
  }
}
