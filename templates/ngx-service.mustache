/* tslint:disable */

import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { HttpOptions } from './';

{{#definitions.length}}
import * as models from './models';
{{/definitions.length}}

export const USE_DOMAIN = new InjectionToken<string>('USE_DOMAIN');
export const USE_HTTP_OPTIONS = new InjectionToken<HttpOptions>('USE_HTTP_OPTIONS');

/**
 * Created with https://github.com/flowup/api-client-generator
 */
@Injectable()
export class APIClient {

  readonly options: HttpOptions;
  private domain: string = `{{&domain}}`;

  constructor(private http: HttpClient,
              @Optional() @Inject(USE_DOMAIN) domain: string,
              @Optional() @Inject(USE_HTTP_OPTIONS) options: HttpOptions) {

    if (domain) {
      this.domain = domain;
    }

    this.options = {
      headers: options && options.headers ? options.headers : new HttpHeaders(),
      params: options && options.params ? options.params : new HttpParams()
    };
  }

{{#methods}}
  {{&methodName}}({{#parameters}}{{&camelCaseName}}: {{importType}}{{#isArray}}[]{{/isArray}}, {{/parameters}}options?: HttpOptions): Observable<{{&response}}> {
    const path = `{{&path}}`;
    options = {...this.options, ...options};

    {{#parameters}}
      {{#isQueryParameter}}
    if ({{&camelCaseName}}) {
          {{#isArray}}
      options.params = {{&camelCaseName}}.reduce((acc, cur) => acc.append('{{&name}}', `${cur}`), options.params);
          {{/isArray}}
          {{^isArray}}
      options.params = options.params.set('{{&name}}', String({{&camelCaseName}}));
          {{/isArray}}
    }
      {{/isQueryParameter}}
      {{#isHeaderParameter}}
    if ({{&camelCaseName}}) {
          {{#isArray}}
      options.headers = options.headers.set('{{&name}}', {{&camelCaseName}}.map(value => `${value}`));
          {{/isArray}}
          {{^isArray}}
      options.headers = options.headers.set('{{&name}}', String({{&camelCaseName}}));
          {{/isArray}}
    }
      {{/isHeaderParameter}}
    {{/parameters}}
    return this.sendRequest<{{&response}}>('{{methodType}}', path, options{{#parameters}}{{#isBodyParameter}}, JSON.stringify({{&camelCaseName}}){{/isBodyParameter}}{{/parameters}});
  }

{{/methods}}
  private sendRequest<T>(method: string, path: string, options: HttpOptions, body?: any): Observable<T> {
    switch (method) {
      case 'GET':
        return this.http.get<T>(`${this.domain}${path}`, options);
      case 'PUT':
        return this.http.put<T>(`${this.domain}${path}`, body, options);
      case 'POST':
        return this.http.post<T>(`${this.domain}${path}`, body, options);
      case 'DELETE':
        return this.http.delete<T>(`${this.domain}${path}`, options);
      default:
        console.error(`Unsupported request: ${method}`);
        return Observable.throw(`Unsupported request: ${method}`);
    }
  }
}
