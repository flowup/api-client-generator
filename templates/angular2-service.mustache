/* tslint:disable */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpObserve, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';

import {
  {{#definitions}}
  {{name}}{{^last}},{{/last}}
  {{/definitions}}
} from '.';

interface HttpOptions {
  headers?: HttpHeaders | { [header: string]: string | string[] },
  observe?: HttpObserve,
  params?: HttpParams | { [param: string]: string | string[] },
  reportProgress?: boolean,
  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text',
  withCredentials?: boolean,
}

/**
 * Created with ngx-swagger-client-generator (https://github.com/flowup/ngx-swagger-client-generator)
 */
@Injectable()
export class ApiClientService {

  private domain = 'http://localhost:8080';
  private httpOptions: HttpOptions = {
    headers: new HttpHeaders(),
    params: new HttpParams()
  };

  constructor(private http: HttpClient,
              @Optional() @Inject('domain') domain: string,
              @Optional() @Inject('httpOptions') httpOptions: HttpOptions) {
    if (domain) {
      this.domain = domain;
    }

    if (httpOptions) {
      this.httpOptions = httpOptions;
    }
  }

{{#methods}}
  {{&methodName}}({{#parameters}}{{&camelCaseName}}: {{typescriptType}}, {{/parameters}}options: HttpOptions = this.httpOptions): Observable<{{&response}}> {
    const path = `{{&backTickPath}}`;

    {{#parameters}}
      {{#isQueryParameter}}
        {{#isSingleton}}
    params = params.set('{{&name}}', '{{&singleton}}' + '');
        {{/isSingleton}}
        {{^isSingleton}}
          {{#isPatternType}}
    Object.keys(parameters).forEach(function(parameterName) {
      if (new RegExp('{{&pattern}}').test(parameterName)) {
        params = params.set(parameterName, parameters[parameterName] + '');
      }
    });
          {{/isPatternType}}
          {{^isPatternType}}
    if ({{&camelCaseName}}) {
          {{#isArray}}
      Object.keys({{&camelCaseName}}).map(value => {
        params = params.set('{{&name}}', value + '');
      });
          {{/isArray}}
          {{^isArray}}
      params = params.set('{{&name}}', {{&camelCaseName}} + '');
          {{/isArray}}
    }
          {{/isPatternType}}
        {{/isSingleton}}
      {{/isQueryParameter}}
      {{#isHeaderParameter}}
        {{#isSingleton}}
    headers = headers.set('{{&name}}', '{{&singleton}}' + '');
        {{/isSingleton}}
        {{^isSingleton}}
    if ({{&camelCaseName}}) {
          {{#isArray}}
      Object.keys({{&camelCaseName}}).map(value => {
        headers = headers.set('{{&name}}', value + '');
      });
          {{/isArray}}
          {{^isArray}}
      headers = headers.set('{{&name}}', {{&camelCaseName}} + '');
          {{/isArray}}
    }
        {{/isSingleton}}
      {{/isHeaderParameter}}
    {{/parameters}}
    return this.sendRequest<{{&response}}>('{{methodType}}', path, options, {{#hasBodyParameters}}JSON.stringify({{#parameters}}{{#isBodyParameter}}{{&camelCaseName}}{{/isBodyParameter}}{{/parameters}}){{/hasBodyParameters}}{{^hasBodyParameters}}null{{/hasBodyParameters}});
  }

{{/methods}}
  private sendRequest<T>(method: string, path: string, options: HttpOptions, body: any): Observable<T> {
    if (method === 'get') {
      return this.http.get<T>(`${this.domain}${path}`, options);
    } else if (method === 'put') {
      return this.http.put<T>(`${this.domain}${path}`, body, options);
    } else if (method === 'post') {
      return this.http.post<T>(`${this.domain}${path}`, body, options);
    } else if (method === 'delete') {
      return this.http.delete<T>(`${this.domain}${path}`, options);
    } else {
      console.error('Unsupported request: ' + method);
      return Observable.throw('Unsupported request: ' + method);
    }
  }
}
