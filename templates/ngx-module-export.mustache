/* tslint:disable */

import { NgModule, ModuleWithProviders } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { {{&serviceName}}, USE_DOMAIN, USE_HTTP_OPTIONS } from './api-client.service';

{{#definitions.length}}
export * from './models';
{{/definitions.length}}

export { {{&serviceName}} } from './{{&serviceFileName}}';
export { {{&interfaceName}} } from './{{&interfaceFileName}}';

/**
 * provided options, headers and params will be used as default for each request
 */
export interface DefaultHttpOptions {
  headers?: {[key: string]: string};
  params?: {[key: string]: string};
  reportProgress?: boolean;
  withCredentials?: boolean;
}

export interface HttpOptions {
  headers?: HttpHeaders;
  params?: HttpParams;
  reportProgress?: boolean;
  withCredentials?: boolean;
}

export interface {{&serviceName}}ModuleConfig {
  domain?: string;
  httpOptions?: DefaultHttpOptions;
}

@NgModule({})
export class {{&serviceName}}Module {
  /**
   * Use this method in your root module to provide the {{&serviceName}}Module
   *
   * If you are not providing
   * @param { {{&serviceName}}ModuleConfig } config
   * @returns { ModuleWithProviders }
   */
  static forRoot(config: {{&serviceName}}ModuleConfig = {}): ModuleWithProviders {
    return {
      ngModule: {{&serviceName}}Module,
      providers: [
        ...(config.domain ? [{provide: USE_DOMAIN, useValue: config.domain}] : []),
        ...(config.httpOptions ? [{provide: USE_HTTP_OPTIONS, useValue: config.httpOptions}] : []),
        {{&serviceName}}
      ]
    };
  }
}
